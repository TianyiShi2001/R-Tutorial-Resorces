[
["ch1.html", "R与tidyverse——数据分析入门 Chapter 1 R和RStudio介绍和安装教程 1.1 什么是R 1.2 安装R和RStudio 1.3 为什么使用R，R与其他统计软件的比较1", " R与tidyverse——数据分析入门 石天熠 2019-06-11 Chapter 1 R和RStudio介绍和安装教程 1.1 什么是R R是一门专精于数据分析与统计学的计算机语言。 理论上，安装了R，你就可以直接在命令行使用R，但是绝大多数人是不喜欢这种硬核的操作方式的。因此我们会安装RStudio. RStudio是R语言官方的IDE（集成开发环境），它的一系列功能使得编辑，整理和管理R代码和项目方便很多。 1.2 安装R和RStudio 1.2.1 安装R https://cran.r-project.org 前往CRAN，根据自己的操作系统（Linux，MacOS或Windows）选择下载安装R. 1.2.2 安装RStudio https://www.rstudio.com/products/rstudio/download/ 前往RStudio下载页，选择最左边免费的开源版本，然后选择对应自己的操作系统的版本，下载并安装。 1.3 为什么使用R，R与其他统计软件的比较1 （这一小节不影响R的学习进度，可以直接跳过到下一章） SAS，SPSS，Prism，R和Python是科研作图常用的软件。 SAS，SPSS和Prism都是收费的，而且不便宜。比如SAS第一年需要10000多美元，随后每年要缴纳几千美元的年费。 R比SAS功能更强大。所有SAS中的功能，都能在R中实现，而很多R中的功能无法在SAS中实现2。 R和Python是开源、免费的。 在数据分析的应用中，R比Python历史更悠久，因此积攒了很多很棒的packages（包）。 使用Python做数据分析近年来愈发流行，网上也有不少教程。 使用R+Python 什么，你说Excel？Excel只能做简单的数据收集和展示，一般用于普通办公，做不了严谨的研究和大数据，功能也非常局限。有五分之一的使用了Excel的遗传学论文，数据都出现了偏差3。 Gentleman, R. (2009). R Programming for Bioinformatics. Boca Raton, FL: CRC Press.↩ https://thomaswdinsmore.com/2014/12/15/sas-versus-r-part-two/↩ Ziemann, M., Eren, Y., &amp; El-Osta, A. (2016). Gene name errors are widespread in the scientific literature. Genome Biology, 17(1), 177. Retrieved from https://doi.org/10.1186/s13059-016-1044-7. doi:10.1186/s13059-016-1044-7↩ "],
["section-2.html", "Chapter 2 获取资源帮助（本书最重要的部分） 2.1 论坛类（解答实际操作中的问题） 2.2 Reference类（像查字典一样，查找特定的function的用法） 2.3 教程和书籍类", " Chapter 2 获取资源帮助（本书最重要的部分） 这本书可以帮助你快速学会R和tidyverse的最常用和最重要的操作，但这仅仅是冰山一角。当你在做自己的研究的时候，会用到很多这本书中没有讲到的方法，因此学会获取资源和帮助是很重要的。以下列举几个常用的获取R的帮助的网站： 2.1 论坛类（解答实际操作中的问题） StackOverflow是世界上做的最大的，氛围也是最好的，计算机技术问答网站（如果你有其他的编程语言基础，一定对它不陌生）。查找问题的时候加上[R]，这样搜索结果就都是与R相关的了（为了进一步缩小搜索范围，可以加上其他的tag，比如[ggplot], [dplyr])。需要注意的规矩是，提问和回答的时候话语尽量精简，不要在任何地方出现与问题无关的话（包括客套话如“谢谢”），了解更多请查看其新手向导。 2.2 Reference类（像查字典一样，查找特定的function的用法） RDocumentation有所有基础R语言和近18000个packages（包）的函数的说明和使用例，有很多还有交互式内容。 2.3 教程和书籍类 R的官方Manuals. 其中新手只需要看An Introduction to R即可。PDF格式查看很舒服，用的是Computer Modern字体，LaTeX排版。 R for Data Science. tidyverse的作者写的一本书，也是 RStudio Resources是RStudio的资源区，里面有关于R和RStudio的“官方”教程，质量极高，还可以下载很多方便实用的Cheat Sheet. 丁国徽翻译了数本关于R的书籍。点击量其实并不高……要想把握前沿信息还是需要阅读英语的能力的。 "],
["ch2.html", "Chapter 3 RStudio界面介绍，基本操作，和创建新项目 3.1 界面 3.2 基本操作", " Chapter 3 RStudio界面介绍，基本操作，和创建新项目 3.1 界面 3.1.1 概览 3.1.1.1 左下角：Console（控制台） 3.1.1.2 右上角：Environment（环境），History（历史）和Connections（连接） 3.1.1.3 右下角：Plots（绘图），Help（帮助），Files（文件），Packages（包）和Viewer（查看器） 3.1.1.4 自定义 3.2 基本操作 3.2.1 执行代码 试着在console里输入1+1，并按回车以执行。你的console会显示： &gt; 1+1 [1] 2 其中2是计算结果， [1]我们在下一章再解释。&gt; 1+1是你的input，[1] 2是console给出的output. 还是用1+1举例，在本书中，对于input和output的展示格式是这样的： 1+1 ## [1] 2 注意到input中的&gt;被省略了，这意味着你可以直接把代码从本书复制到你的console并按回车执行（因为它本身自带了&gt;)，类似地，你从其他各种网站上找到的说明书，教程和论坛帖子中看到的R代码，也都是这种形式出现，你可以直接复制粘贴然后回车执行，很方便。 再来一个例子，试着在console里输入以下代码，打完每一行按回车执行或者换行（你可以直接复制粘贴，但是要脑补这是你一个字一个字打出来的）： library(datasets) with(airquality, plot(Wind, Ozone, main = &quot;Ozone and Wind in New York City&quot;, pch = 20)) model &lt;- lm(Ozone ~ Wind, airquality) abline(model, lwd = 2) 可以看到，在plots区，生成了一副漂亮的图表。（先别在意每行代码具体的作用，在之后的章节我会一一讲述） 这时，把RStudio关掉，再重新启动，你会发现你之前辛辛苦苦作的图付之一炬了。 3.2.2 记录和管理代码 初学者经常会在console里写代码，或者从别处复制代码，并执行。这对于一次性的计算（比如写统计学作业时用R来算线性回归的参数）很方便，但是如果你想保存你的工作，你需要把它记录在R文件里。如果你的工作比较复杂，比如有一个excel表格作为数据源，然后在R中用不同的方法分析，导出图表，这时候你会希望这些文件都集中在一起。你可以创建RProject来管理它们。 3.2.3 创建Project 3.2.4 管理 "],
["ch3.html", "Chapter 4 更多的基本操作，数据类型，运算，逻辑和函数 4.1 运算 4.2 逻辑 4.3 以下是不重要的一些内容 4.4 简易的统计学计算", " Chapter 4 更多的基本操作，数据类型，运算，逻辑和函数 4.1 运算 4.1.1 基础 4.1.1.1 基础中的基础（加减乘除） 最基础的arithmetic operators（数学运算符）有： 符号 描述 + 加 - 减 * 乘 / 除以 ^或** 乘幂 以上这些应该不需要解释。 4.1.1.2 求整数商和余数 %% 是求余数符号，比如7%%3得到1； %/% 是求整数商，比如7%%3得到2； 最常见的两个用法是判定一个数的奇偶性，和时间，角度等单位的转换。（后面再详细介绍）。 4.1.1.3 对数 log(x, base=y)便是运算\\(\\log_y{x}\\)，或者写成 log(base=y, x)也可以; 它可以简写成log(x,y)，同样表示的是\\(\\log_y{x}\\)，但是如果写成log(y,x)就变成了\\(\\log_x{y}\\) 如果你有一点编程基础，应该能看明白为什么，如果没看明白，下面讲函数的时候我会解释。 4.2 逻辑 4.2.1 TRUE和FALSE 4.2.2 Logical Operators（逻辑运算符） R中的logical operators 有： 符号 描述 == equal to（等于） != equal to（不等于） &lt; less than（小于） &gt; more than（大于） &lt;= less than or equal to（小于等于） &gt;= more than or equal to（大于等于） &amp; AND（和） | OR（或） ! 反义符号（见下） 4.3 以下是不重要的一些内容 4.3.1 Console和R script编辑器的一些特性 Console 中每个命令开头的&gt;叫做prompt（我不知道它的中文名诶），当它出现在你所编辑的那一行的开头时，按下回车的时候那行的命令才会被执行。有时候它会消失，这时候按esc可以将其恢复。 prompt消失的主要原因是你的代码没有写完，比如括号不完整： &gt; 2+(3+4 这时你按回车，它会显示： &gt; 2+(3+4 + +号是在提示代码没写完整。这时你把括号补上再按回车： &gt; 2+(3+4 + ) [1] 9 便可以完成计算。 这意味着我们可以把一条很长的命令分成很多行。比如我们可以写这样的代码（在R script编辑器中！） if(1 + 1 == 2 &amp; 1 + 2 == 5){ print(2) } else{ print(3) } 然后Ctrl+Enter执行。 ``` &lt;function&gt;(&lt;argument&gt; = &lt;value&gt;) 4.3.2 赋值(assignment): 使用&lt;-，而不是= 与很多其他的计算机语言不同，&lt;-是R中的赋值符号： x &lt;- 2 4.4 简易的统计学计算 4.4.1 t分布 下面介绍的这几种方法是以这个t分布函数图为基础的： 阴影区域为\\(P\\)，虚线对应的\\(t\\)为\\(t^*\\). qt()可以把\\(P\\)转化成\\(t^*\\),pt()则相反。 举个例子就明白了。假设你需要算一个confidence interval（置信区间），confidence level（置信等级）为\\(95\\%\\)，即\\(\\alpha=0.05\\)，degrees of freedom(自由度)为\\(12\\)，那么怎么算\\(t^*\\)呢？ qt(0.975, df = 12) ## [1] 2.178813 对，就是这么简单。（为什么是\\(0.975\\)？因为你要把\\(0.05\\)分到左右两边，就等同于t分布的\\(t=0.095\\)） 再举一个例子，你在做t检验，双尾的，算出来\\(t=1.345\\)，自由度是\\(15\\)，那么\\(p\\)值怎么算呢？ p &lt;- (1-(pt(2.2, df = 15)))*2 p ## [1] 0.04389558 其中pt(2.2, df = 15)算出阴影面积，1减去它再乘以二就是对应的双尾t检验的\\(p\\)值。 4.4.2 z分布 没有z分布专门的函数。可以直接用t分布代替，把df调到很大（比如999999）就行了。比如我们试一下\\(95\\%\\)置信区间所对应的\\(z\\)： qt(0.975,9999999) ## [1] 1.959964 （果然是\\(1.96\\)） 4.4.3 t检验 t test分为以下几种： One sample t test Two sample… paired t test Unequal variance t test Equal variance t test 在R中做t检验，很简单，以上这些t检验，都是用t.test 这个函数去完成。 以one sample为例： x &lt;- c(2.23,2.24,2.34,2.31,2.35,2.27,2.29,2.26,2.25,2.21,2.29,2.34,2.32) t.test(x, mu = 2.31) ## ## One Sample t-test ## ## data: x ## t = -2.0083, df = 12, p-value = 0.06766 ## alternative hypothesis: true mean is not equal to 2.31 ## 95 percent confidence interval: ## 2.257076 2.312155 ## sample estimates: ## mean of x ## 2.284615 可以看到\\(p=0.06766\\)。 R的默认是双尾检验，你也可以设置成单尾的： x &lt;- c(2.23,2.24,2.34,2.31,2.35,2.27,2.29,2.26,2.25,2.21,2.29,2.34,2.32) t.test(x, mu = 2.31, alternative = &quot;less&quot;) ## ## One Sample t-test ## ## data: x ## t = -2.0083, df = 12, p-value = 0.03383 ## alternative hypothesis: true mean is less than 2.31 ## 95 percent confidence interval: ## -Inf 2.307143 ## sample estimates: ## mean of x ## 2.284615 \\(p\\)值一下就减了一半。 Two-sample: x &lt;- c(2.23,2.24,2.34,2.31,2.35,2.27,2.29,2.26,2.25,2.21,2.29,2.34,2.32) y &lt;- c(2.27,2.29,2.37,2.38,2.39,2.25,2.39,2.16,2.55,2.81,2.19,2.44,2.22) t.test(x, y) ## ## Welch Two Sample t-test ## ## data: x and y ## t = -1.5624, df = 13.65, p-value = 0.1411 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -0.18460351 0.02921889 ## sample estimates: ## mean of x mean of y ## 2.284615 2.362308 r的默认是non-paired, unequal variance，你可以通过增加paired = TRUE，var.equal = TRUE这两个参数来改变它。 t.test(x, y, paired = TRUE) ## ## Paired t-test ## ## data: x and y ## t = -1.4739, df = 12, p-value = 0.1662 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -0.19253874 0.03715412 ## sample estimates: ## mean of the differences ## -0.07769231 4.4.4 \\(\\chi^2\\) 检验 \\(\\chi^2\\)有两种，good "],
["ch4.html", "Chapter 5 安装和使用packges（包） 5.1 Packages是什么，为什么使用它们？ 5.2 如何安装packages 5.3 如何使用packages", " Chapter 5 安装和使用packges（包） 5.1 Packages是什么，为什么使用它们？ Package是别人写好的在R中运行的程序（以及附带的数据和文档），你可以免费安装和使用它们。 Packages可以增加在基础R语言中没有的功能，可以精简你代码的语句，或是提升使用体验。比如有个叫做tikzDevice的package可以将R中的图表导出成tikz语法的矢量图，方便在LaTeX中使用。这本书的排版也是依赖于用R中的一个叫做bookdown的package （它真的超棒，我也许会另出一个课程来讲解它）. 这个课程主要是学习tidyverse这个package， 5.2 如何安装packages 首先我们安装tidyverse（很重要，课程接下来的部分都要使用这个package）： install.packages(&quot;tidyverse&quot;) 在console中运行以上代码，R就会从CRAN中下载tidyverse并安装到你电脑上的默认位置。因此安装packages需要网络连接。 如果想安装多个packages，你可以一行一行地安装，或是把多个packages的名字合成一列，同时安装，比如： install.packages(c(&quot;nycflights13&quot;, &quot;gapminder&quot;, &quot;Lahman&quot;) 它其中包含一系列小 5.3 如何使用packages 安装packages后，有两种方法使用它们。以tidyverse为例： library(&#39;tidyverse&#39;) 或 require(&#39;tidyverse&#39;) 两者的效果很大程度上都是一样的，都可以用来读取单个package。但是它们有两个微妙的不同： require()会返回一个逻辑值。如果package读取成功，会返回TRUE，反之则返回FALSE. library()如果读取试图读取不存在的package，会直接造成错误(error)，而require()不会造成错误，只会产生一个警告(warning). 这意味着require()可以用来同时读取多个packages： lapply(c(&quot;dplyr&quot;,&quot;ggplot2&quot;), require, character.only = TRUE) ## [[1]] ## [1] TRUE ## ## [[2]] ## [1] TRUE 或者更精简一点， lapply(c(&quot;dplyr&quot;,&quot;ggplot2&quot;), require, c = T) ## [[1]] ## [1] TRUE ## ## [[2]] ## [1] TRUE 每次重启R的时候，上一次使用的packages都会被清空，所以需要重新读取。因此我们要在R script里面记录该script需要使用的packages（这算是逼迫你养成好习惯。当你把你的代码分享给别人的时候，要保证在别人的电脑上也能正常运行，就必须要指明要使用哪些packages） 一种快速读取多个packages的方法： lapply(c(&quot;dplyr&quot;,&quot;ggplot2&quot;), require, character.only = TRUE) ## [[1]] ## [1] TRUE ## ## [[2]] ## [1] TRUE "],
["ch5.html", "Chapter 6 List（列），data frame（数据框）和tibble（进化版数据框）", " Chapter 6 List（列），data frame（数据框）和tibble（进化版数据框） 嘿嘿嘿 "]
]
